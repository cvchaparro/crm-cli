#!/usr/bin/env node

const crmCli = require('./build/cli');
const package = require('./package.json');

const help = () => {
    console.log(
`usage: crm COMMAND [filter]

Available commands:

 - reports:

    i,interactions ... list of interactions.
    com,companies .... list of companies.
    con,contacts ..... list of contacts.
    a,apps ........... list of apps.
    about ............ all we know about a contact / company.
    f,followup ....... list of required follow-up.

 - data entry:

    add-company ............... register a new company.
    add-contact ............... register a new contact.
    add-app ................... register a new app.
    add-i,add-interaction ..... register a new customer interaction.

    edit-company .............. edit an existing company.
    edit-contact .............. edit an existing contact.
    edit-app .................. edit an existing app.
    edit-i,edit-interaction ... edit an existing interaction.
    done ...................... remove follow-up date from interaction.

 - email:

    template FILE .......... fill in values for an email template.
    template-help .......... show the list of template fields.

 - system:

    init-crm ........ create data file in current directory.


Customize output with environment variables:

  CSV=1 ............... output tables in pseudo csv.

`);
};

const version = () => {
    console.log(package.version);
};

const commands = {
    v: version,
    version: version,
    i: crmCli.interactions.query,
    int: crmCli.interactions.query,
    interactions: crmCli.interactions.query,
    com: crmCli.companies.query,
    company: crmCli.companies.query,
    companies: crmCli.companies.query,
    con: crmCli.contacts.query,
    contact: crmCli.contacts.query,
    contacts: crmCli.contacts.query,
    a: crmCli.apps.query,
    app: crmCli.apps.query,
    apps: crmCli.apps.query,
    f: crmCli.followups.query,
    fol: crmCli.followups.query,
    followup: crmCli.followups.query,
    followups: crmCli.followups.query,
    about: crmCli.about,
    'add-company': crmCli.companies.add,
    'add-contact': crmCli.contacts.add,
    'add-interaction': crmCli.interactions.add,
    'add-i': crmCli.interactions.add,
    'add-app': crmCli.apps.add,
    'edit-company': crmCli.companies.edit,
    'edit-contact': crmCli.contacts.edit,
    'edit-interaction': crmCli.interactions.edit,
    'edit-i': crmCli.interactions.edit,
    'edit-app': crmCli.apps.edit,
    'done': crmCli.followups.done,
    'template-help': crmCli.templates.help,
    template: crmCli.templates.run,
};

// Make sure --<command> and -<command> work too
Object.keys(commands).forEach((key) => {
    commands[`-${key}`] = commands[key];
    commands[`--${key}`] = commands[key];
});

async function main() {

    const database = await crmCli.data.connectDatabase();
    if (process.argv[2] === 'init-crm') {
        await database.create();
        console.log('Done.');
        process.exit(0);
    }

    const command = commands[process.argv[2]];
    if (!command) {
        help();
        process.exit(1);
    }

    const filter = process.argv.slice(3).join(' ');
    try {
        const session = await database.open();
        const report = await command(session, filter);
        if (report && report.printAsText)
            await report.printAsText();
        await session.close();
    }
    catch (e) {
        console.error(e);
    }
}
main();
